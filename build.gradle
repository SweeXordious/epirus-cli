import java.text.SimpleDateFormat

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id "application"
    id "distribution"
    id "idea"
    id "jacoco"
    id "com.github.johnrengelman.shadow" version "5.1.0"
    id "com.diffplug.gradle.spotless" version "3.25.0"
    id "de.undercouch.download" version "4.0.0"
}

description 'epirus command line tools'
mainClassName = 'io.epirus.console.Epirus'
applicationName = 'epirus'

ext {
    web3jVersion = "4.6.1"
    picocli = "4.0.4"
    slf4jVersion = "1.7.+"
    junitVersion = '5.+'
    mockitoVersion = "3.+"
    gsonVersion = "2.8.6"
    wireMockVersion = "2.25.1"
    web3jOpenApiVersion = '0.1.0-SNAPSHOT'
    gradleVersion = "6.2"
    kotlinLoggin = "1.7.9"
    web3jEpirusVersion = '0.0.4'
}


apply {
    [
        'jacoco',
        'java',
        'javadoc',
        'repositories',
        'spotless'
    ].each { buildScript ->
        download {
            src "https://raw.githubusercontent.com/web3j/build-tools/master/gradle/$buildScript/build.gradle"
            dest "$rootDir/gradle/$buildScript/build.gradle"
            overwrite true
            quiet true
            onlyIfModified true
        }
        from("$rootDir/gradle/$buildScript/build.gradle")
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://dl.bintray.com/ethereum/maven/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

distZip {
    archiveName "epirus-${project.version}.zip"
}

distTar {
    archiveName "epirus-${project.version}.tar"
}

dependencies {
    api "org.web3j:abi:$web3jVersion"

    implementation "org.web3j:codegen:$web3jVersion",
            "org.web3j:contracts:$web3jVersion",
            "org.web3j:core:$web3jVersion",
            "org.web3j:crypto:$web3jVersion",
            "org.web3j.openapi:web3j-openapi-codegen:$web3jOpenApiVersion",
            "org.web3j:hosted-providers:$web3jVersion",
            "io.epirus:epirus-web3j:$web3jEpirusVersion",
            "info.picocli:picocli:$picocli",
            files('libs/smartcheck.jar'),
            "javax.xml.bind:jaxb-api:2.2.11",
            "com.sun.xml.bind:jaxb-core:2.2.11",
            "com.sun.xml.bind:jaxb-impl:2.2.11",
            "javax.activation:activation:1.1.1",
            "com.google.code.gson:gson:$gsonVersion",
            "javax.activation:activation:1.1.1",
            "org.apache.commons:commons-lang3:3.9",
            'com.github.zafarkhaja:java-semver:0.9.0',
            'log4j:log4j:1.2.17',
            "org.gradle:gradle-tooling-api:$gradleVersion",
            "io.github.microutils:kotlin-logging:$kotlinLoggin"


    compile group: 'com.diogonunes', name: 'JCDP', version: '4.0.1'


    runtime "org.slf4j:slf4j-nop:$slf4jVersion"

    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.mockito:mockito-core:$mockitoVersion",
            "com.github.tomakehurst:wiremock-jre8:$wireMockVersion"
    testImplementation 'org.mockito:mockito-inline:3.3.0'
}

task createProperties(dependsOn: processResources) doLast {
    // if resources dir is empty we need to create this ourselves
    new File("$buildDir/resources/main/").mkdirs()

    new File("$buildDir/resources/main/epirus-version.properties").withWriter { w ->
        Properties p = new Properties()
        p['version'] = project.version.toString()
        p['timestamp'] = getTimestamp()
        p.store w, null
    }
}

def getTimestamp() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S z")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(today)
}

classes { dependsOn createProperties }

task shadowBugWorkaround(type: Jar) {
    archiveBaseName = 'nested-gradle-jar'
    from files(file("${rootDir}/gradle/wrapper/gradle-wrapper.jar"))
    destinationDir file('build/shadow-bug-workaround')
}

shadowJar {
    dependsOn shadowBugWorkaround
    zip64 = true
    // Shadow plugin bug: explodes the nested jar.
    // Workaround: double-nest the jar.
    // Refer https://github.com/johnrengelman/shadow/issues/111
    from shadowBugWorkaround
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

sourceCompatibility = 1.8

def generatedResources = "$buildDir/generated-resources/main"

sourceSets {
    main {
        // Register an output folder on the main source set:
        output.dir(generatedResources, builtBy: 'generateVersionProperties')
    }
}

task generateVersionProperties {
    description 'Creates a version.properties file with build info that is added to the root of the JAR'
    doLast {
        new File(generatedResources).mkdirs()
        def generated = new File(generatedResources, "version.properties")
        generated.write("version=$web3jOpenApiVersion\n")
        generated.append("timestamp=${System.currentTimeMillis()}\n")
    }
}
